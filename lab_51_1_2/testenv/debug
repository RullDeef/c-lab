cd testenv/
rm -f *.exe *.gcov *.gcda *.gcno

cd ../
gcc -std=c99 -pedantic -Wall -Wvla -Werror -Wfloat-equal -Wfloat-conversion -O0 --coverage -o testenv/main.exe *.c

cd testenv/

# special case tests for command line arguments
echo
echo "  [Special test cases]"

actual=$(main.exe)
if [ "$actual" = "" ]; then
  echo "Empty arg list test:      passed"
else
  echo "Empty arg list test:      failed"
fi

actual=$(main.exe nosuch.file)
if [ "$actual" = "" ]; then
  echo "File does not exist test: passed"
else
  echo "File does not exist test: failed"
fi

actual=$(main.exe in_4.txt too much args)
if [ "$actual" = "" ]; then
  echo "Too much args test:       passed"
else
  echo "Too much args test:       failed"
fi

# end of special test cases

echo
echo "  [Functional test cases]"

# tests counters
declare -i total=$(ls -1q in_*.txt | wc -l)
declare -i passed=0

for ((i=1;i<=total;i++)); do
  # gather expected and actual strings
  expected=$(cat out_${i}.txt)
  actual=$(main.exe in_${i}.txt)

  if [ "$expected" = "$actual" ]; then
    passed=$(( passed + 1 ))
    echo "Test #${i}: Passed."
  else
    echo "Test #${i}: Failed."
  fi
done

echo
echo "Tests: ${total} total, ${passed} passed, $(( total - passed )) failed."

echo
echo "Gathering code coverage info..."

cd ../

declare -i percentage=0
declare -i amount=$(ls -1q *.c | wc -l)
for f in *.c; do
  percentage_i=`gcov $f | grep -E -o "[0-9]+" | head -1`
  percentage=$(( percentage + percentage_i / amount ))
done
echo "Code executed: ${percentage}%"

# clean up everything except *.c.gcov
rm -f *.exe *.gcno *.gcda
