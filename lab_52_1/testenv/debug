cd testenv/
rm -f *.exe *.gcov *.gcda *.gcno

cd ../
gcc -std=c99 -pedantic -Wall -Wvla -Werror -Wfloat-equal -Wfloat-conversion -O0 --coverage -o testenv/main.exe *.c

cd testenv/

# tests counters
declare -i total=17
declare -i passed=0

# TEST #1 ================================================

actual=$(main.exe)
if [ $? -ne 0 ]; then
  printf "%-40s %s\n" "Empty arg list test" "passed"
  passed=$((passed + 1))
else
  printf "%-40s %s\n" "Empty arg list test" "failed"
fi

# TEST #2 ================================================

cp in_2.bin in_2.bin.cpy
actual=$(main.exe sb in_2.bin.cpy in_2_2.bin)
if [ $? -ne 0 ]; then
  printf "%-40s %s\n" "Invalid args amount test" "passed"
  passed=$((passed + 1))
else
  printf "%-40s %s\n" "Invalid args amount test" "failed"
fi
rm in_2.bin.cpy

# TEST #3 ================================================

actual=$(main.exe sb in_3.bin)
if [ $? -ne 0 ]; then
  printf "%-40s %s\n" "Sort empty or nonexistent file test" "passed"
  passed=$((passed + 1))
else
  printf "%-40s %s\n" "Sort empty or nonexistent file test" "failed"
fi

# TEST #4 ================================================

cp in_4.bin in_4.bin.cpy
actual=$(main.exe pb in_4.bin.cpy out_4.bin "Ca")
if [ $? -ne 0 ]; then
  printf "%-40s %s\n" "Print out empty or nonexistent file test" "passed"
  passed=$((passed + 1))
else
  printf "%-40s %s\n" "Print out empty or nonexistent file test" "failed"
fi
rm in_4.bin.cpy

# TEST #5 ================================================

cp in_5.bin in_5.bin.cpy
actual=$(main.exe sb in_5.bin.cpy)
if [ $? -ne 0 ]; then
  printf "%-40s %s\n" "Sort incorrect formatted file test" "passed"
  passed=$((passed + 1))
else
  printf "%-40s %s\n" "Sort incorrect formatted file test" "failed"
fi
rm in_5.bin.cpy

# TEST #6 ================================================

actual=$(main.exe fb in_6.bin out_6.bin "Ma")
if [ $? -ne 0 ]; then
  printf "%-40s %s\n" "Print incorrect formatted file test" "passed"
  passed=$((passed + 1))
else
  printf "%-40s %s\n" "Print incorrect formatted file test" "failed"
fi

# TEST #7 ================================================

cp in_7.bin in_7.bin.cpy
actual=$(main.exe sb in_7.bin.cpy)
if [ $? -eq 0 ]; then
  printf "%-40s %s\n" "Sort correct file test" "passed"
  passed=$((passed + 1))
else
  printf "%-40s %s\n" "Sort correct file test" "failed"
fi
rm in_7.bin.cpy

# TEST #8 ================================================

actual=$(main.exe fb in_8.bin out_8.bin Vas)
if [ $? -eq 0 ]; then
  printf "%-40s %s\n" "Print correct file test" "passed"
  passed=$((passed + 1))
else
  printf "%-40s %s\n" "Print correct file test" "failed"
fi

# TEST #9 ================================================

actual=$(main.exe fb in_9.bin out_9.bin Ca)
if [ $? -ne 0 ]; then
  printf "%-40s %s\n" "Print correct file test #2" "passed"
  passed=$((passed + 1))
else
  printf "%-40s %s\n" "Print correct file test #2" "failed"
fi

# TEST #10 ===============================================

cp in_10.bin in_10.bin.cpy
actual=$(main.exe db in_10.bin.cpy)
if [ $? -eq 0 ]; then
  printf "%-40s %s\n" "Delete students with same mean" "passed"
  passed=$((passed + 1))
else
  printf "%-40s %s\n" "Delete students with same mean" "failed"
fi
rm in_10.bin.cpy

# TEST #11 ===============================================

cp in_11.bin in_11.bin.cpy
actual=$(main.exe db in_11.bin.cpy)
if [ $? -eq 0 ]; then
  printf "%-40s %s\n" "Delete students with diff mean" "passed"
  passed=$((passed + 1))
else
  printf "%-40s %s\n" "Delete students with diff mean" "failed"
fi
rm in_11.bin.cpy

# TEST #12 ===============================================

actual=$(main.exe pb in_12.bin)
if [ $? -ne 0 ]; then
  printf "%-40s %s\n" "Unknown command test" "passed"
  passed=$((passed + 1))
else
  printf "%-40s %s\n" "Unknown command test" "failed"
fi

# TEST #13 ===============================================

actual=$(main.exe sb file.bin)
if [ $? -ne 0 ]; then
  printf "%-40s %s\n" "Sort unknown file test" "passed"
  passed=$((passed + 1))
else
  printf "%-40s %s\n" "Sort unknown file test" "failed"
fi
rm -f file.bin

# TEST #14 ===============================================

actual=$(main.exe fb in_14.bin file.bin Vas)
if [ $? -ne 0 ]; then
  printf "%-40s %s\n" "Print unknown file #1" "passed"
  passed=$((passed + 1))
else
  printf "%-40s %s\n" "Print unknown file #1" "failed"
fi
rm -f file.bin

# TEST #15 ===============================================

actual=$(main.exe fb file.bin file.bun Vas)
if [ $? -ne 0 ]; then
  printf "%-40s %s\n" "Print unknown file #2" "passed"
  passed=$((passed + 1))
else
  printf "%-40s %s\n" "Print unknown file #2" "failed"
fi

# TEST #16 ===============================================

actual=$(main.exe db file.bin)
if [ $? -ne 0 ]; then
  printf "%-40s %s\n" "Delete unknown file test" "passed"
  passed=$((passed + 1))
else
  printf "%-40s %s\n" "Delete unknown file test" "failed"
fi
rm -f file.bin

# TEST #17 ===============================================

actual=$(main.exe fb file.bin file.bin Vas)
if [ $? -ne 0 ]; then
  printf "%-40s %s\n" "Print same in out files" "passed"
  passed=$((passed + 1))
else
  printf "%-40s %s\n" "Print mase in out files" "failed"
fi
rm -f file.bin

# end of special test cases ==============================

echo
echo "Tests: ${total} total, ${passed} passed, $((total - passed)) failed."

echo
echo "Gathering code coverage info..."

cd ../

declare -i percentage=0
declare -i amount=$(ls -1q *.c | wc -l)
for f in *.c; do
  percentage_i=`gcov $f | grep -E -o "[0-9]+" | head -1`
  printf "%-20s %s%%\n" $f $percentage_i
  percentage=$((percentage + percentage_i))
done
echo
echo "Code executed: $((percentage / amount))%"

# clean up everything except *.c.gcov
rm -f testenv/main.exe *.gcno *.gcda
